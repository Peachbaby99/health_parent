<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                            http://www.springframework.org/schema/beans/spring-beans.xsd
                            http://www.springframework.org/schema/mvc
                            http://www.springframework.org/schema/mvc/spring-mvc.xsd
                            http://code.alibabatech.com/schema/dubbo
                            http://code.alibabatech.com/schema/dubbo/dubbo.xsd
                            http://www.springframework.org/schema/context
                            http://www.springframework.org/schema/context/spring-context.xsd
                            http://www.springframework.org/schema/security
                            http://www.springframework.org/schema/security/spring-security.xsd">

    <!--    匿名访问,不需要登录,静态资源
     pattern:必须以斜杠开始
     security:不需要登录
    -->
    <security:http pattern="/login.html" security="none"/>
    <security:http pattern="/fail.html" security="none"/>

    <!--1.配置需要权限才能访问的资源
             auto-config属性: true 自动配置
             use-expressions属性: false 不使用表达式
    -->
    <security:http auto-config="true" use-expressions="true">
        <!--配置拦截的路径 pattern属性: 拦截的路径规则; access属性:需要什么角色才能访问-->
<!--        <security:intercept-url pattern="/**" access="ROLE_ADMIN"></security:intercept-url>-->

<!--        hasAuthority:是否有权限-->
<!--        hasRole:是否有角色-->
        <!--只要认证通过就可以访问-->
        <security:intercept-url pattern="/index.html"  access="isAuthenticated()" />
        <security:intercept-url pattern="/a.html"  access="isAuthenticated()" />

        <!--拥有add权限就可以访问b.html页面-->
        <security:intercept-url pattern="/b.html"  access="hasAuthority('add')" />

        <!--拥有ROLE_ADMIN角色就可以访问c.html页面-->
        <security:intercept-url pattern="/c.html"  access="hasRole('ROLE_ADMIN')" />

        <!--拥有ROLE_ADMIN角色就可以访问d.html页面，
            注意：此处虽然写的是ADMIN角色，框架会自动加上前缀ROLE_-->
        <security:intercept-url pattern="/d.html"  access="hasRole('ADMIN')" />





        <!--    登录页面与处理的配置
        username-parameter   password-parameter:对应参数名
        login-processing-url:指定处理登陆的请求,可指定自己写的路径controller
        login-pag:登陆页面,登陆失败跳转的页面
        authentication-failure-url:登陆失败访问的页面,这个指定,login-pag无效
         default-target-url:登陆成功后跳转到这个页面
        always-use-default-target:总是跳转到默认的页面
        -->
        <security:form-login
                login-page="/login.html"
                username-parameter="username"
                password-parameter="password"
                login-processing-url="/login.do"
                authentication-failure-url="/fail.html"
                default-target-url="/index.html"
                always-use-default-target="false"
        />
        <!--关闭跨越访问限制-->
        <security:csrf disabled="true"/>
        <!--        退出登录
                logout-url:处理退出的url
               invalidate-session:使用session失效
               logout-success-url:退出后转到懂得页面
        -->
        <security:logout logout-url="/logout.do" invalidate-session="true" logout-success-url="/login.html"/>
    </security:http>
<!-- 开启权限控制注解支持-->
<security:global-method-security pre-post-annotations="enabled"/>

    <!--2.配置认证管理器-->
    <security:authentication-manager>
        <security:authentication-provider user-service-ref="userService">
            <!--            <security:user-service>-->
            <!--                &lt;!&ndash;配置账号密码，以及该账号的角色信息     name属性: 用户名; password属性:密码({noop}不加密方式);  authorities属性:赋予的角色     &ndash;&gt;-->
            <!--                <security:user name="admin" authorities="ROLE_ADMIN" password="{noop}admin"></security:user>-->
            <!--            </security:user-service>-->
<!--            使用的加密器,security会用这个加密器来匹配器密码,encoder.matches方法-->
            <security:password-encoder ref="encoder"/>
        </security:authentication-provider>
    </security:authentication-manager>
    <!--    包扫描-->
    <context:component-scan base-package="com.xjt.secunity"/>
<!--注入加密容器-->
    <bean id="encoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>


    <mvc:annotation-driven></mvc:annotation-driven>
    <context:component-scan base-package="com.itheima.controller"></context:component-scan>
</beans>